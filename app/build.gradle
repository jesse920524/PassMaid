apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    /**
     * defaultConfig是默认的配置，它是一个ProductFlavor。ProductFlavor允许我们根据不同的情况同时生成多个不同的apk包。
     */
    defaultConfig {
        applicationId rootProject.ext.android.applicationId//配置包名,作为app的唯一标识
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

        /**签名配置*/
        signingConfigs {
            //签名配置
            release {
                keyAlias 'tome'
                keyPassword '455202'
                storeFile file('../frameKey.jks')
                storePassword '455202'
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }

        /**多渠道打包*/
//        productFlavors{
//            cutomize1{
//                "applicationId" "dev.jessefu.passmaid"
//
//                buildConfigField "String", "BASE_URL", ""
//            }
//
//            customize2{
//                buildConfigField "String", "BASE_URL", ""
//            }
//        }
        //自定义字段在BuildConfig
        buildConfigField "String", "BASE_URL", "\"aa\""

        //MultiDex分包方法
        multiDexEnabled true

        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        //目录指向配置
        sourceSets {
            //设置依赖so库路径
            main.jniLibs.srcDirs = ['libs']
        }

        ndk {
            // 设置支持的SO库架构(cpu)
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    buildTypes {
        debug{
            //是否进行混淆
            minifyEnabled false
            // 混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //配置签名文件
//            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            //是否清理无用资源,依赖于minifyEnabled
            shrinkResources false
            //是否启用zipAlign压缩
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
}

}

//定义打包时间
def releaseTime(){
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')//这样配置之后本地libs文件夹下的扩展名为jar的都会被依赖
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso_core"]

    //依赖component_base
    implementation project(':component_base')

    //集成模式,依赖各业务module
    if (!rootProject.ext.isModule){
        implementation project(':module_about')
        implementation project(':module_details')
        implementation project(':module_entrance')
        implementation project(':module_main')
        implementation project(':module_modify')
        implementation project(':module_search')
    }
}
